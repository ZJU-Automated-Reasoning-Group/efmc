"""generated by LLM, to check"""
import z3
import tempfile
import subprocess
import os
from typing import Tuple


def z3_to_smtlib2_abduction(formula: z3.ExprRef, target_var: str) -> str:
    """Convert Z3 formula to SMT-LIB2 format with abduction syntax"""
    # Get base SMT-LIB2 representation of the formula
    base_smt = formula.sexpr()

    # Construct the full SMT-LIB2 file content with abduction syntax
    smt2_content = f"""
(set-logic ALL)
(declare-fun {target_var} () Bool)

; Original variables from the formula
{get_variable_declarations(formula)}

; Synthesis conjecture for abduction
(synth-fun A () Bool
    ((Start Bool))
    ((Start Bool (
        true false
        (and Start Start)
        (or Start Start)
        (not Start)
        (=> Start Start)
        {get_atomic_predicates(formula)}
    )))
)

; Assert that A implies the target formula
(constraint (=> A {base_smt}))

(check-synth)
"""
    return smt2_content


def get_variable_declarations(formula: z3.ExprRef) -> str:
    """Extract and format variable declarations from Z3 formula"""
    decls = set()

    def collect_decls(f):
        if z3.is_const(f):
            decls.add(f"(declare-fun {f} () {f.sort()})")
        for child in f.children():
            collect_decls(child)

    collect_decls(formula)
    return "\n".join(sorted(decls))


def get_atomic_predicates(formula: z3.ExprRef) -> str:
    """Extract atomic predicates for grammar specification"""
    predicates = set()

    def collect_predicates(f):
        if z3.is_app(f) and f.decl().kind() in [z3.Z3_OP_LE, z3.Z3_OP_LT, z3.Z3_OP_GE, z3.Z3_OP_GT, z3.Z3_OP_EQ]:
            predicates.add(f.sexpr())
        for child in f.children():
            collect_predicates(child)

    collect_predicates(formula)
    return " ".join(predicates)


def solve_abduction(formula: z3.ExprRef) -> Tuple[bool, str]:
    """Solve abduction problem using CVC5"""
    # Create temporary file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.smt2', delete=False) as tmp_file:
        smt2_content = z3_to_smtlib2_abduction(formula, "target")
        tmp_file.write(smt2_content)
        tmp_path = tmp_file.name

    try:
        # Call CVC5 with appropriate flags
        from efmc.efmc_config import cvc5_exec
        result = subprocess.run(
            [cvc5_exec, '--lang=sygus', '--produce-abducts', tmp_path],
            capture_output=True,
            text=True,
            check=True
        )

        # Parse output
        output = result.stdout.strip()
        if 'unsat' in output.lower():
            return False, "No solution found"
        else:
            # Extract the abduced formula
            # The output format should be like "sat\n(define-fun A () Bool ...)"
            solution = output.split('\n')[1] if '\n' in output else output
            return True, solution

    except subprocess.CalledProcessError as e:
        return False, f"CVC5 error: {e.stderr}"
    except Exception as e:
        return False, f"Error: {str(e)}"
    finally:
        # Cleanup
        if os.path.exists(tmp_path):
            os.remove(tmp_path)


# Example usage
if __name__ == "__main__":
    # Create example formula
    x = z3.Int('x')
    y = z3.Int('y')
    formula = z3.And(x > 0, y > x)

    success, result = solve_abduction(formula)
    if success:
        print("Found abduction solution:", result)
    else:
        print("Failed:", result)
