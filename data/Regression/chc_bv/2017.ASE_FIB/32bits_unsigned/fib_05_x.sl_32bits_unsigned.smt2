(set-logic HORN)
(declare-fun inv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) ) Bool)
(assert (forall ((x (_ BitVec 32)) (y (_ BitVec 32)) (i (_ BitVec 32)) (j (_ BitVec 32))) 
       (=> ( and ( = x (_ bv0 32) ) ( = y (_ bv0 32) ) ( = j (_ bv0 32) ) ( = i (_ bv0 32) ) ) (inv x y i j))))
(assert (forall ((x (_ BitVec 32)) (y (_ BitVec 32)) (i (_ BitVec 32)) (j (_ BitVec 32)) (x! (_ BitVec 32)) (y! (_ BitVec 32)) (i! (_ BitVec 32)) (j! (_ BitVec 32))) 
       (=> (and (inv x y i j) ( let ( ( a!1 ( or ( = j! ( bvadd y! j ) ) ( = j! ( bvadd ( bvadd y! j ) (_ bv1 32) ) ) ) ) ) ( and ( = x! ( bvadd x (_ bv1 32) ) ) ( = y! ( bvadd y (_ bv1 32) ) ) ( = i! ( bvadd x! i ) ) a!1 ) )) (inv x! y! i! j!))))
(assert (forall ((x (_ BitVec 32)) (y (_ BitVec 32)) (i (_ BitVec 32)) (j (_ BitVec 32))) 
       (=> (inv x y i j) ( bvuge j i ))))
(check-sat)
