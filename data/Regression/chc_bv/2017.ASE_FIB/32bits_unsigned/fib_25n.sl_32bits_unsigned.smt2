(set-logic HORN)
(declare-fun inv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) ) Bool)
(assert (forall ((x (_ BitVec 32)) (y (_ BitVec 32)) (i (_ BitVec 32)) (j (_ BitVec 32)) (turn (_ BitVec 32))) 
       (=> ( and ( = x (_ bv0 32) ) ( = y (_ bv0 32) ) ( = i (_ bv0 32) ) ( = j (_ bv0 32) ) ( = turn (_ bv0 32) ) ) (inv x y i j turn))))
(assert (forall ((x (_ BitVec 32)) (y (_ BitVec 32)) (i (_ BitVec 32)) (j (_ BitVec 32)) (turn (_ BitVec 32)) (x! (_ BitVec 32)) (y! (_ BitVec 32)) (i! (_ BitVec 32)) (j! (_ BitVec 32)) (turn! (_ BitVec 32))) 
       (=> (and (inv x y i j turn) ( or ( and ( = turn (_ bv0 32) ) ( = x! x ) ( = y! y ) ( = i! i ) ( = j! j ) ( = turn! (_ bv1 32) ) ) ( and ( = turn (_ bv0 32) ) ( = x! x ) ( = y! y ) ( = i! i ) ( = j! j ) ( = turn! (_ bv2 32) ) ) ( and ( = turn (_ bv1 32) ) ( = x y ) ( = x! x ) ( = y! y ) ( = i! ( bvadd i (_ bv1 32) ) ) ( = j! j ) ( = turn! (_ bv1 32) ) ) ( and ( = turn (_ bv1 32) ) ( = x y ) ( = x! x ) ( = y! y ) ( = i! ( bvadd i (_ bv1 32) ) ) ( = j! j ) ( = turn! (_ bv2 32) ) ) ( and ( = turn (_ bv1 32) ) ( not ( = x y ) ) ( = x! x ) ( = y! y ) ( = i! i ) ( = j! ( bvadd j (_ bv1 32) ) ) ( = turn! (_ bv1 32) ) ) ( and ( = turn (_ bv1 32) ) ( not ( = x y ) ) ( = x! x ) ( = y! y ) ( = i! i ) ( = j! ( bvadd j (_ bv1 32) ) ) ( = turn! (_ bv2 32) ) ) ( and ( = turn (_ bv2 32) ) ( bvuge i j ) ( = x! ( bvadd x (_ bv1 32) ) ) ( = y! ( bvadd y (_ bv1 32) ) ) ( = i! i ) ( = j! j ) ( = turn! (_ bv0 32) ) ) ( and ( = turn (_ bv2 32) ) ( bvult i j ) ( = x! x ) ( = y! ( bvadd y (_ bv1 32) ) ) ( = i! i ) ( = j! j ) ( = turn! (_ bv0 32) ) ) )) (inv x! y! i! j! turn!))))
(assert (forall ((x (_ BitVec 32)) (y (_ BitVec 32)) (i (_ BitVec 32)) (j (_ BitVec 32)) (turn (_ BitVec 32))) 
       (=> (inv x y i j turn) ( bvuge i j ))))
(check-sat)
