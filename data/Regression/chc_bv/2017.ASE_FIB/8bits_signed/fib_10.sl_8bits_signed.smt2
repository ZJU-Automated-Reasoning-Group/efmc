(set-logic HORN)
(declare-fun inv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) ) Bool)
(assert (forall ((x (_ BitVec 8)) (y (_ BitVec 8)) (w (_ BitVec 8)) (z (_ BitVec 8))) 
       (=> ( and ( = w (_ bv1 8) ) ( = z (_ bv0 8) ) ( = x (_ bv0 8) ) ( = y (_ bv0 8) ) ) (inv x y w z))))
(assert (forall ((x (_ BitVec 8)) (y (_ BitVec 8)) (w (_ BitVec 8)) (z (_ BitVec 8)) (x! (_ BitVec 8)) (y! (_ BitVec 8)) (w! (_ BitVec 8)) (z! (_ BitVec 8))) 
       (=> (and (inv x y w z) ( or ( and ( = w (_ bv1 8) ) ( = z (_ bv0 8) ) ( = x! ( bvadd x (_ bv1 8) ) ) ( = w! (_ bv0 8) ) ( = y! ( bvadd y (_ bv1 8) ) ) ( = z! (_ bv1 8) ) ) ( and ( not ( = w (_ bv1 8) ) ) ( = z (_ bv0 8) ) ( = x! x ) ( = w! w ) ( = y! ( bvadd y (_ bv1 8) ) ) ( = z! (_ bv1 8) ) ) ( and ( = w (_ bv1 8) ) ( not ( = z (_ bv0 8) ) ) ( = x! ( bvadd x (_ bv1 8) ) ) ( = w! (_ bv0 8) ) ( = y! y ) ( = z! z ) ) ( and ( not ( = w (_ bv1 8) ) ) ( not ( = z (_ bv0 8) ) ) ( = x! x ) ( = w! w ) ( = y! y ) ( = z! z ) ) )) (inv x! y! w! z!))))
(assert (forall ((x (_ BitVec 8)) (y (_ BitVec 8)) (w (_ BitVec 8)) (z (_ BitVec 8))) 
       (=> (inv x y w z) ( = x y ))))
(check-sat)
