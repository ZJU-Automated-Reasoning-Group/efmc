(set-logic HORN)
(declare-fun inv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) ) Bool)
(assert (forall ((k (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (j (_ BitVec 8)) (n (_ BitVec 8))) 
       (=> ( and ( bvugt k (_ bv0 8) ) ( = i j ) ( = n (_ bv0 8) ) ( or ( = b (_ bv1 8) ) ( = b (_ bv0 8) ) ) ) (inv k b i j n))))
(assert (forall ((k (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (j (_ BitVec 8)) (n (_ BitVec 8)) (k! (_ BitVec 8)) (b! (_ BitVec 8)) (i! (_ BitVec 8)) (j! (_ BitVec 8)) (n! (_ BitVec 8))) 
       (=> (and (inv k b i j n) ( or ( and ( bvuge n ( bvmul (_ bv2 8) k ) ) ( = k! k ) ( = b! b ) ( = i! i ) ( = j! j ) ( = n! n ) ) ( and ( bvult n ( bvmul (_ bv2 8) k ) ) ( = b (_ bv1 8) ) ( = k! k ) ( = b! (_ bv0 8) ) ( = i! ( bvadd i (_ bv1 8) ) ) ( = j! j ) ( = n! ( bvadd n (_ bv1 8) ) ) ) ( and ( bvult n ( bvmul (_ bv2 8) k ) ) ( not ( = b (_ bv1 8) ) ) ( = k! k ) ( = b! (_ bv1 8) ) ( = i! i ) ( = j! ( bvadd j (_ bv1 8) ) ) ( = n! ( bvadd n (_ bv1 8) ) ) ) )) (inv k! b! i! j! n!))))
(assert (forall ((k (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8)) (j (_ BitVec 8)) (n (_ BitVec 8))) 
       (=> (inv k b i j n) ( => ( bvuge n ( bvmul (_ bv2 8) k ) ) ( = i j ) ))))
(check-sat)
