(set-logic HORN)
(declare-fun inv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((z (_ BitVec 32))
         (x (_ BitVec 32))
         (y (_ BitVec 32))
         (v (_ BitVec 32)))
  (=> (and (bvsgt x y) (bvsgt y z) (= v #x00000000)) (inv z x y v))))
(assert (forall ((z (_ BitVec 32))
         (x (_ BitVec 32))
         (y (_ BitVec 32))
         (v (_ BitVec 32))
         (x! (_ BitVec 32))
         (y! (_ BitVec 32))
         (z! (_ BitVec 32))
         (v! (_ BitVec 32)))
  (let ((a!1 (and (inv z x y v)
                  (= x! (bvadd x #x00000001))
                  (= y! (bvadd y #x00000003))
                  (= z! (bvadd z #x00000002))
                  (= v! (ite (bvslt x y) (bvadd v #x00000001) v)))))
    (=> a!1 (inv x! y! z! v!)))))
(assert (forall ((z (_ BitVec 32))
         (x (_ BitVec 32))
         (y (_ BitVec 32))
         (v (_ BitVec 32)))
  (let ((a!1 (bvadd z (bvmul (bvadd #x00000001 (bvnot #x00000001)) x))))
  (let ((a!2 (not (and (not (bvsle a!1 #x00011b53)) (not (bvsle v #x00000000))))))
    (=> (inv z x y v) a!2)))))
(check-sat)
