(set-logic HORN)
(declare-fun inv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((z (_ BitVec 64))
         (x (_ BitVec 64))
         (y (_ BitVec 64))
         (v (_ BitVec 64)))
  (=> (and (bvsgt x y) (bvsgt y z) (= v #x0000000000000000)) (inv z x y v))))
(assert (forall ((z (_ BitVec 64))
         (x (_ BitVec 64))
         (y (_ BitVec 64))
         (v (_ BitVec 64))
         (x! (_ BitVec 64))
         (y! (_ BitVec 64))
         (z! (_ BitVec 64))
         (v! (_ BitVec 64)))
  (let ((a!1 (and (inv z x y v)
                  (= x! (bvadd x #x0000000000000001))
                  (= y! (bvadd y #x0000000000000003))
                  (= z! (bvadd z #x0000000000000002))
                  (= v! (ite (bvslt x y) (bvadd v #x0000000000000001) v)))))
    (=> a!1 (inv x! y! z! v!)))))
(assert (forall ((z (_ BitVec 64))
         (x (_ BitVec 64))
         (y (_ BitVec 64))
         (v (_ BitVec 64)))
  (let ((a!1 (bvadd z
                    (bvmul (bvadd #x0000000000000001 (bvnot #x0000000000000001))
                           x))))
  (let ((a!2 (not (and (not (bvsle a!1 #x0000000000011b53))
                       (bvsle v #x0000000000000000)))))
    (=> (inv z x y v) a!2)))))
(check-sat)
