(set-logic HORN)
(declare-fun inv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)
(assert (forall ((y (_ BitVec 64))
         (x (_ BitVec 64))
         (z (_ BitVec 64))
         (w (_ BitVec 64)))
  (=> (and (= x #x0000000000000000) (bvsgt y z) (= w #x0000000000000000))
      (inv y x z w))))
(assert (forall ((y (_ BitVec 64))
         (x (_ BitVec 64))
         (z (_ BitVec 64))
         (w (_ BitVec 64))
         (x! (_ BitVec 64))
         (y! (_ BitVec 64))
         (z! (_ BitVec 64))
         (w! (_ BitVec 64)))
  (let ((a!1 (and (inv y x z w)
                  (= x! (bvadd #x0000000000000005 x))
                  (= y! (bvadd #x0000000000000003 y))
                  (= z! (bvadd #x0000000000000001 z))
                  (= w!
                     (ite (bvslt x z)
                          (bvadd w #x0000000000000001)
                          (bvsub w #x0000000000000001))))))
    (=> a!1 (inv x! y! z! w!)))))
(assert (forall ((y (_ BitVec 64))
         (x (_ BitVec 64))
         (z (_ BitVec 64))
         (w (_ BitVec 64)))
  (let ((a!1 (not (and (not (bvsle x y)) (bvsle w #x0000000000000000)))))
    (=> (inv y x z w) a!1))))
(check-sat)
