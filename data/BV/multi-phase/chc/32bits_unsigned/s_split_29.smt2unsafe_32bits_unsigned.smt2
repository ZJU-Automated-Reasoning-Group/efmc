(set-logic HORN)
(declare-fun inv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert (forall ((z (_ BitVec 32))
         (y (_ BitVec 32))
         (x (_ BitVec 32))
         (w (_ BitVec 32)))
  (=> (and (= x #x00000000) (= y #x00000000) (= z #x00000000) (= w #x00000000))
      (inv z y x w))))
(assert (forall ((z (_ BitVec 32))
         (y (_ BitVec 32))
         (x (_ BitVec 32))
         (w (_ BitVec 32))
         (x! (_ BitVec 32))
         (y! (_ BitVec 32))
         (z! (_ BitVec 32))
         (w! (_ BitVec 32)))
  (let ((a!1 (ite (bvugt (bvsub y (bvmul #x0000000a x)) #x00000000)
                  (bvadd z #x00000001)
                  z))
        (a!2 (ite (bvugt (bvsub y (bvmul #x0000000a x)) #x00000000)
                  w
                  (bvadd w #x00000001))))
    (=> (and (inv z y x w)
             (= x! (bvadd x #x00000001))
             (= y! (bvadd y x))
             (= z! a!1)
             (= w! a!2))
        (inv x! y! z! w!)))))
(assert (forall ((z (_ BitVec 32))
         (y (_ BitVec 32))
         (x (_ BitVec 32))
         (w (_ BitVec 32)))
  (let ((a!1 (not (and (not (bvule x #x00000064)) (not (bvule z w))))))
    (=> (inv z y x w) a!1))))
(check-sat)
