(set-logic HORN)
(declare-fun inv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) ) Bool)
(assert (forall ((i (_ BitVec 32)) (pvlen (_ BitVec 32)) (t (_ BitVec 32)) (k (_ BitVec 32)) (n (_ BitVec 32)) (j (_ BitVec 32)) (turn (_ BitVec 32))) 
       (=> ( and ( = k (_ bv0 32) ) ( = i (_ bv0 32) ) ( = turn (_ bv0 32) ) ) (inv i pvlen t k n j turn))))
(assert (forall ((i (_ BitVec 32)) (pvlen (_ BitVec 32)) (t (_ BitVec 32)) (k (_ BitVec 32)) (n (_ BitVec 32)) (j (_ BitVec 32)) (turn (_ BitVec 32)) (i! (_ BitVec 32)) (pvlen! (_ BitVec 32)) (t! (_ BitVec 32)) (k! (_ BitVec 32)) (n! (_ BitVec 32)) (j! (_ BitVec 32)) (turn! (_ BitVec 32))) 
       (=> (and (inv i pvlen t k n j turn) ( or ( and ( = turn (_ bv0 32) ) ( = i! ( bvadd i (_ bv1 32) ) ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv0 32) ) ) ( and ( = turn (_ bv0 32) ) ( = i! ( bvadd i (_ bv1 32) ) ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv1 32) ) ) ( and ( = turn (_ bv1 32) ) ( bvugt i pvlen ) ( = i! (_ bv0 32) ) ( = pvlen! i ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv2 32) ) ) ( and ( = turn (_ bv1 32) ) ( bvule i pvlen ) ( = i! (_ bv0 32) ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv2 32) ) ) ( and ( = turn (_ bv2 32) ) ( = i! ( bvadd i (_ bv1 32) ) ) ( = pvlen! pvlen ) ( = t! i ) ( = k! ( bvadd k (_ bv1 32) ) ) ( = n! n ) ( = j! j ) ( = turn! (_ bv2 32) ) ) ( and ( = turn (_ bv2 32) ) ( = i! ( bvadd i (_ bv1 32) ) ) ( = pvlen! pvlen ) ( = t! i ) ( = k! ( bvadd k (_ bv1 32) ) ) ( = n! n ) ( = j! j ) ( = turn! (_ bv3 32) ) ) ( and ( = turn (_ bv3 32) ) ( = i! i ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv3 32) ) ) ( and ( = turn (_ bv3 32) ) ( = i! i ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv4 32) ) ) ( and ( = turn (_ bv4 32) ) ( = i! i ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! i ) ( = j! (_ bv0 32) ) ( = turn! (_ bv5 32) ) ) )) (inv i! pvlen! t! k! n! j! turn!))))
(assert (forall ((i (_ BitVec 32)) (pvlen (_ BitVec 32)) (t (_ BitVec 32)) (k (_ BitVec 32)) (n (_ BitVec 32)) (j (_ BitVec 32)) (turn (_ BitVec 32))) 
       (=> (inv i pvlen t k n j turn) ( bvuge k (_ bv0 32) ))))
(check-sat)
