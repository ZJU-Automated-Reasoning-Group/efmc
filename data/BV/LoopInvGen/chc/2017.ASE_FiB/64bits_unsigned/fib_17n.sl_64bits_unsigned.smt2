(set-logic HORN)
(declare-fun inv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) ) Bool)
(assert (forall ((k (_ BitVec 64)) (i (_ BitVec 64)) (j (_ BitVec 64)) (n (_ BitVec 64)) (turn (_ BitVec 64))) 
       (=> ( and ( = k (_ bv1 64) ) ( = i (_ bv1 64) ) ( = j (_ bv0 64) ) ( = turn (_ bv0 64) ) ) (inv k i j n turn))))
(assert (forall ((k (_ BitVec 64)) (i (_ BitVec 64)) (j (_ BitVec 64)) (n (_ BitVec 64)) (turn (_ BitVec 64)) (k! (_ BitVec 64)) (i! (_ BitVec 64)) (j! (_ BitVec 64)) (n! (_ BitVec 64)) (turn! (_ BitVec 64))) 
       (=> (and (inv k i j n turn) ( let ( ( a!1 ( and ( = turn (_ bv1 64) ) ( bvult j i ) ( = k! ( bvsub ( bvadd k i ) j ) ) ( = i! i ) ( = j! ( bvadd j (_ bv1 64) ) ) ( = n! n ) ( = turn! turn ) ) ) ) ( or ( and ( = turn (_ bv0 64) ) ( bvult i n ) ( = k! k ) ( = i! i ) ( = j! (_ bv0 64) ) ( = n! n ) ( = turn! (_ bv1 64) ) ) ( and ( = turn (_ bv0 64) ) ( bvuge i n ) ( = k! k ) ( = i! i ) ( = j! j ) ( = n! n ) ( = turn! (_ bv3 64) ) ) a!1 ( and ( = turn (_ bv1 64) ) ( bvuge j i ) ( = k! k ) ( = i! i ) ( = j! j ) ( = n! n ) ( = turn! (_ bv2 64) ) ) ( and ( = turn (_ bv2 64) ) ( = k! k ) ( = i! ( bvadd i (_ bv1 64) ) ) ( = j! j ) ( = n! n ) ( = turn! (_ bv0 64) ) ) ( and ( bvuge turn (_ bv3 64) ) ( = k! k ) ( = i! i ) ( = j! j ) ( = n! n ) ( = turn! turn ) ) ( and ( bvult turn (_ bv0 64) ) ( = k! k ) ( = i! i ) ( = j! j ) ( = n! n ) ( = turn! turn ) ) ) )) (inv k! i! j! n! turn!))))
(assert (forall ((k (_ BitVec 64)) (i (_ BitVec 64)) (j (_ BitVec 64)) (n (_ BitVec 64)) (turn (_ BitVec 64))) 
       (=> (inv k i j n turn) ( => ( = turn (_ bv3 64) ) ( bvuge k n ) ))))
(check-sat)
