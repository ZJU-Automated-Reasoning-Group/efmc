(set-logic HORN)
(declare-fun inv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) ) Bool)
(assert (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (k (_ BitVec 64)) (j (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)) (m (_ BitVec 64))) 
       (=> ( and ( = ( bvadd x y ) k ) ( = m (_ bv0 64) ) ( = j (_ bv0 64) ) ) (inv x y k j i n m))))
(assert (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (k (_ BitVec 64)) (j (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)) (m (_ BitVec 64)) (x! (_ BitVec 64)) (y! (_ BitVec 64)) (k! (_ BitVec 64)) (j! (_ BitVec 64)) (i! (_ BitVec 64)) (n! (_ BitVec 64)) (m! (_ BitVec 64))) 
       (=> (and (inv x y k j i n m) ( or ( and ( bvult j n ) ( = j i ) ( = x! ( bvadd x (_ bv1 64) ) ) ( = y! ( bvsub y (_ bv1 64) ) ) ( = k! k ) ( = j! ( bvadd j (_ bv1 64) ) ) ( = i! i ) ( = n! n ) ( = m! m ) ) ( and ( bvult j n ) ( = j i ) ( = x! ( bvadd x (_ bv1 64) ) ) ( = y! ( bvsub y (_ bv1 64) ) ) ( = k! k ) ( = j! ( bvadd j (_ bv1 64) ) ) ( = i! i ) ( = n! n ) ( = m! j ) ) ( and ( bvult j n ) ( not ( = j i ) ) ( = x! ( bvsub x (_ bv1 64) ) ) ( = y! ( bvadd y (_ bv1 64) ) ) ( = k! k ) ( = j! ( bvadd j (_ bv1 64) ) ) ( = i! i ) ( = n! n ) ( = m! m ) ) ( and ( bvult j n ) ( not ( = j i ) ) ( = x! ( bvsub x (_ bv1 64) ) ) ( = y! ( bvadd y (_ bv1 64) ) ) ( = k! k ) ( = j! ( bvadd j (_ bv1 64) ) ) ( = i! i ) ( = n! n ) ( = m! j ) ) ( and ( bvuge j n ) ( = x! x ) ( = y! y ) ( = k! k ) ( = j! j ) ( = i! i ) ( = n! n ) ( = m! m ) ) )) (inv x! y! k! j! i! n! m!))))
(assert (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (k (_ BitVec 64)) (j (_ BitVec 64)) (i (_ BitVec 64)) (n (_ BitVec 64)) (m (_ BitVec 64))) 
       (=> (inv x y k j i n m) ( => ( bvuge j n ) ( and ( = ( bvadd x y ) k ) ( or ( bvule n (_ bv0 64) ) ( bvule (_ bv0 64) m ) ) ( or ( bvule n (_ bv0 64) ) ( bvule m n ) ) ) ))))
(check-sat)
