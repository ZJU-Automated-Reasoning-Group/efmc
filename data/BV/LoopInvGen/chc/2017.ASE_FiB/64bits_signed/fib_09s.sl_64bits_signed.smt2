(set-logic HORN)
(declare-fun inv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) ) Bool)
(assert (forall ((i (_ BitVec 64)) (pvlen (_ BitVec 64)) (t (_ BitVec 64)) (k (_ BitVec 64)) (n (_ BitVec 64)) (j (_ BitVec 64)) (turn (_ BitVec 64))) 
       (=> ( and ( = k (_ bv0 64) ) ( = i (_ bv0 64) ) ( = turn (_ bv0 64) ) ) (inv i pvlen t k n j turn))))
(assert (forall ((i (_ BitVec 64)) (pvlen (_ BitVec 64)) (t (_ BitVec 64)) (k (_ BitVec 64)) (n (_ BitVec 64)) (j (_ BitVec 64)) (turn (_ BitVec 64)) (i! (_ BitVec 64)) (pvlen! (_ BitVec 64)) (t! (_ BitVec 64)) (k! (_ BitVec 64)) (n! (_ BitVec 64)) (j! (_ BitVec 64)) (turn! (_ BitVec 64))) 
       (=> (and (inv i pvlen t k n j turn) ( or ( and ( = turn (_ bv0 64) ) ( = i! ( bvadd i (_ bv1 64) ) ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv0 64) ) ) ( and ( = turn (_ bv0 64) ) ( = i! ( bvadd i (_ bv1 64) ) ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv1 64) ) ) ( and ( = turn (_ bv1 64) ) ( bvsgt i pvlen ) ( = i! (_ bv0 64) ) ( = pvlen! i ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv2 64) ) ) ( and ( = turn (_ bv1 64) ) ( bvsle i pvlen ) ( = i! (_ bv0 64) ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv2 64) ) ) ( and ( = turn (_ bv2 64) ) ( = i! ( bvadd i (_ bv1 64) ) ) ( = pvlen! pvlen ) ( = t! i ) ( = k! ( bvadd k (_ bv1 64) ) ) ( = n! n ) ( = j! j ) ( = turn! (_ bv2 64) ) ) ( and ( = turn (_ bv2 64) ) ( = i! ( bvadd i (_ bv1 64) ) ) ( = pvlen! pvlen ) ( = t! i ) ( = k! ( bvadd k (_ bv1 64) ) ) ( = n! n ) ( = j! j ) ( = turn! (_ bv3 64) ) ) ( and ( = turn (_ bv3 64) ) ( = i! i ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv3 64) ) ) ( and ( = turn (_ bv3 64) ) ( = i! i ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! n ) ( = j! j ) ( = turn! (_ bv4 64) ) ) ( and ( = turn (_ bv4 64) ) ( = i! i ) ( = pvlen! pvlen ) ( = t! t ) ( = k! k ) ( = n! i ) ( = j! (_ bv0 64) ) ( = turn! (_ bv5 64) ) ) )) (inv i! pvlen! t! k! n! j! turn!))))
(assert (forall ((i (_ BitVec 64)) (pvlen (_ BitVec 64)) (t (_ BitVec 64)) (k (_ BitVec 64)) (n (_ BitVec 64)) (j (_ BitVec 64)) (turn (_ BitVec 64))) 
       (=> (inv i pvlen t k n j turn) ( bvsge k (_ bv0 64) ))))
(check-sat)
