(set-logic HORN)
(declare-fun inv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) ) Bool)
(assert (forall ((i (_ BitVec 32)) (j (_ BitVec 32)) (x (_ BitVec 32)) (y (_ BitVec 32)) (z1 (_ BitVec 32)) (z2 (_ BitVec 32)) (z3 (_ BitVec 32))) 
       (=> ( and ( = i x ) ( = j y ) ) (inv i j x y z1 z2 z3))))
(assert (forall ((i (_ BitVec 32)) (j (_ BitVec 32)) (x (_ BitVec 32)) (y (_ BitVec 32)) (z1 (_ BitVec 32)) (z2 (_ BitVec 32)) (z3 (_ BitVec 32)) (i! (_ BitVec 32)) (j! (_ BitVec 32)) (x! (_ BitVec 32)) (y! (_ BitVec 32)) (z1! (_ BitVec 32)) (z2! (_ BitVec 32)) (z3! (_ BitVec 32))) 
       (=> (and (inv i j x y z1 z2 z3) ( and ( = i! i ) ( = j! j ) ( not ( = x (_ bv0 32) ) ) ( = x! ( bvsub x (_ bv1 32) ) ) ( = y! ( bvsub y (_ bv1 32) ) ) )) (inv i! j! x! y! z1! z2! z3!))))
(assert (forall ((i (_ BitVec 32)) (j (_ BitVec 32)) (x (_ BitVec 32)) (y (_ BitVec 32)) (z1 (_ BitVec 32)) (z2 (_ BitVec 32)) (z3 (_ BitVec 32))) 
       (=> (inv i j x y z1 z2 z3) ( or ( not ( = x (_ bv0 32) ) ) ( not ( = i j ) ) ( = y (_ bv0 32) ) ))))
(check-sat)
