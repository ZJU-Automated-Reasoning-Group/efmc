(set-logic HORN)
(declare-fun inv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) ) Bool)
(assert (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (z (_ BitVec 64)) (v1 (_ BitVec 64)) (v2 (_ BitVec 64)) (v3 (_ BitVec 64)) (size (_ BitVec 64))) 
       (=> ( = x (_ bv0 64) ) (inv x y z v1 v2 v3 size))))
(assert (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (z (_ BitVec 64)) (v1 (_ BitVec 64)) (v2 (_ BitVec 64)) (v3 (_ BitVec 64)) (size (_ BitVec 64)) (x! (_ BitVec 64)) (y! (_ BitVec 64)) (z! (_ BitVec 64)) (v1! (_ BitVec 64)) (v2! (_ BitVec 64)) (v3! (_ BitVec 64)) (size! (_ BitVec 64))) 
       (=> (and (inv x y z v1 v2 v3 size) ( or ( and ( = x! ( bvadd x (_ bv1 64) ) ) ( = y! z! ) ( bvsle z! y ) ( bvslt x size ) ) ( and ( = x! ( bvadd x (_ bv1 64) ) ) ( = y! y ) ( bvsgt z! y ) ( bvslt x size ) ) )) (inv x! y! z! v1! v2! v3! size!))))
(assert (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (z (_ BitVec 64)) (v1 (_ BitVec 64)) (v2 (_ BitVec 64)) (v3 (_ BitVec 64)) (size (_ BitVec 64))) 
       (=> (inv x y z v1 v2 v3 size) ( not ( and ( bvsge x size ) ( bvslt z y ) ( bvsgt size (_ bv0 64) ) ) ))))
(check-sat)
