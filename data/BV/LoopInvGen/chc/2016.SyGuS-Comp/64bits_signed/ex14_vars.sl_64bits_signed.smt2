(set-logic HORN)
(declare-fun inv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) ) Bool)
(assert (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (n (_ BitVec 64)) (v1 (_ BitVec 64)) (v2 (_ BitVec 64)) (v3 (_ BitVec 64))) 
       (=> ( = x (_ bv1 64) ) (inv x y n v1 v2 v3))))
(assert (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (n (_ BitVec 64)) (v1 (_ BitVec 64)) (v2 (_ BitVec 64)) (v3 (_ BitVec 64)) (x! (_ BitVec 64)) (y! (_ BitVec 64)) (n! (_ BitVec 64)) (v1! (_ BitVec 64)) (v2! (_ BitVec 64)) (v3! (_ BitVec 64))) 
       (=> (and (inv x y n v1 v2 v3) ( and ( bvsle x n ) ( = y! ( bvsub n x ) ) ( = x! ( bvadd x (_ bv1 64) ) ) )) (inv x! y! n! v1! v2! v3!))))
(assert (forall ((x (_ BitVec 64)) (y (_ BitVec 64)) (n (_ BitVec 64)) (v1 (_ BitVec 64)) (v2 (_ BitVec 64)) (v3 (_ BitVec 64))) 
       (=> (inv x y n v1 v2 v3) ( not ( and ( bvsle x n ) ( = y ( bvsub n x ) ) ( or ( bvsge y n ) ( bvsgt (_ bv0 64) y ) ) ) ))))
(check-sat)
