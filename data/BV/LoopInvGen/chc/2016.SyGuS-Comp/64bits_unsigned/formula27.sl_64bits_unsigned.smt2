(set-logic HORN)
(declare-fun inv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) (_ BitVec 64) ) Bool)
(assert (forall ((x1 (_ BitVec 64)) (x2 (_ BitVec 64)) (x3 (_ BitVec 64)) (x4 (_ BitVec 64)) (x5 (_ BitVec 64))) 
       (=> ( and ( = x1 (_ bv0 64) ) ( = x2 (_ bv0 64) ) ( = x3 (_ bv0 64) ) ( = x4 (_ bv0 64) ) ( = x5 (_ bv0 64) ) ) (inv x1 x2 x3 x4 x5))))
(assert (forall ((x1 (_ BitVec 64)) (x2 (_ BitVec 64)) (x3 (_ BitVec 64)) (x4 (_ BitVec 64)) (x5 (_ BitVec 64)) (x1! (_ BitVec 64)) (x2! (_ BitVec 64)) (x3! (_ BitVec 64)) (x4! (_ BitVec 64)) (x5! (_ BitVec 64))) 
       (=> (and (inv x1 x2 x3 x4 x5) ( and ( bvule (_ bv0 64) x1! ) ( bvule x1! ( bvadd x4! (_ bv1 64) ) ) ( = x2! x3! ) ( = (_ bv0 64) x5! ) ( or ( bvule x2! ( bvadd (_ bv1 64) ( bvnot (_ bv1 64) ) ) ) ( bvule x4! ( bvadd x2! (_ bv2 64) ) ) ) )) (inv x1! x2! x3! x4! x5!))))
(assert (forall ((x1 (_ BitVec 64)) (x2 (_ BitVec 64)) (x3 (_ BitVec 64)) (x4 (_ BitVec 64)) (x5 (_ BitVec 64))) 
       (=> (inv x1 x2 x3 x4 x5) ( and ( bvule (_ bv0 64) x1 ) ( bvule x1 ( bvadd x4 (_ bv1 64) ) ) ( = x2 x3 ) ( = (_ bv0 64) x5 ) ( or ( bvule x2 ( bvadd (_ bv1 64) ( bvnot (_ bv1 64) ) ) ) ( bvule x4 ( bvadd x2 (_ bv2 64) ) ) ) ))))
(check-sat)
